pipeline {
agent any

tools {
    maven 'maven'
    }

stages {
    stage ('Checkout') {
        steps{
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/rahmanca/DevOps-Demo-WebApp.git']]])
        }
    }

    stage ('Code Analysis') {
        steps {
            withSonarQubeEnv(credentialsId: 'sonar', installationName: 'sonarqube') {
                sh 'mvn sonar:sonar -D sonar.login=admin -D sonar.password=admin'
            }
        }
    }

    stage ('Build') {
        steps {
            sh 'mvn clean install'
        }
    }

    stage ('DeployTest') {
        steps {
            deploy adapters: [tomcat8(credentialsId: 'tomcat', path: '', url: 'http://34.123.169.55:8080')], contextPath: 'QAWebapp', war: '**/*.war'
        }
    }

    stage ('jFrogserver') {
        steps {
            rtServer (
            id: 'artifactory', url: 'https://devops5391.jfrog.io/artifactory',
            // If you're using username and password:
            username: 'deploy1',
            password: '!3O18neo',
            // If Jenkins is configured to use an http proxy, you can bypass the proxy when using this Artifactory server:
            bypassProxy: true,
            // Configure the connection timeout (in seconds).
            // The default value (if not configured) is 300 seconds:
            timeout: 300)
        }
    }

    stage ('jFrogserverupload') {
        steps {
            rtUpload (
            serverId: 'artifactory',
            spec: '''{
            "files": [
                {
                "pattern": "**/*.war",
                "target": "deploy1/WEBPOC/AVNCommunication/1.0/"
                }
                ]
            }''',
            buildName: 'descriptivepipeline1',
            buildNumber: '50'
            )
        }   
    }

    stage('UI Test') { // Get code
      steps {
        sh 'mvn clean install -f functionaltest/pom.xml'
        // get code from our Git repository
        publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: false,
            reportDir: '\\functionaltest\\target\\surefire-reports',
            reportFiles: 'index.html',
            reportName: 'Report'
          ])
        }
      }
      
      stage('Performance Test') { // Get code
      steps {
        // get code from our Git repository
        echo 'Running BalzeMeterTest'
        blazeMeterTest credentialsId: 'Blazemeter', testId: '8499632.taurus', workspaceId: '650666'
        }
      }
      


    stage ('DeployProd') {
        steps {
            sh 'mvn clean install -f pom.xml'
            deploy adapters: [tomcat8(credentialsId: 'tomcat', path: '', url: 'http://35.238.218.219:8080')], contextPath: 'ProdWebapp', war: '**/*.war'
        }
    }
    
    stage('Sanity Test') { // Get code
      steps {
      sh 'mvn clean install -f Acceptancetest/pom.xml'
        // get code from our Git repository
        publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: false,
            reportDir: '\\Acceptancetest\\target\\surefire-reports',
            reportFiles: 'index.html',
            reportName: 'Sanity Test Report'
          ])
        }
      } 

    stage ('SlackNotificationProd') {
        steps {
        slackSend channel: 'alerts', message: 'Prod Build Success', teamDomain: 'friends-dover', tokenCredentialId: 'slack'
        }
    }

    }
}
